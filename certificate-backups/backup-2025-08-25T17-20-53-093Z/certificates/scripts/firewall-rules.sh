#!/bin/bash
# VPN Security Hardening - Firewall Rules
# Generated by Network Security Manager
# Requirements: 6.1, 6.2

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}[INFO]${NC} Applying VPN firewall rules..."

# Configuration
VPN_INTERFACE="tun0"
VPN_SUBNET="10.8.0.0/24"
VPN_PORT="1194"
MGMT_PORT="3000"
EXTERNAL_INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)

# Function to log firewall actions
log_action() {
    logger "VPN-FIREWALL: $1"
    echo -e "${GREEN}[FIREWALL]${NC} $1"
}

# Function to check if rule exists
rule_exists() {
    iptables -C $@ 2>/dev/null
}

# Backup existing rules
echo -e "${YELLOW}[INFO]${NC} Backing up existing iptables rules..."
iptables-save > /Users/alex/Desktop/privateVPN/test-certificates/scripts/iptables-backup-$(date +%Y%m%d-%H%M%S).rules

# Enable IP forwarding
echo 1 > /proc/sys/net/ipv4/ip_forward
echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf

log_action "Enabling IP forwarding"

# INPUT chain rules
log_action "Configuring INPUT chain rules"

# Allow loopback
if ! rule_exists INPUT -i lo -j ACCEPT; then
    iptables -A INPUT -i lo -j ACCEPT
    log_action "Added loopback rule"
fi

# Allow established and related connections
if ! rule_exists INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT; then
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    log_action "Added established connections rule"
fi

# Allow OpenVPN port with rate limiting
if ! rule_exists INPUT -p udp --dport $VPN_PORT -m limit --limit 10/min -j ACCEPT; then
    iptables -A INPUT -p udp --dport $VPN_PORT -m limit --limit 10/min -j ACCEPT
    log_action "Added OpenVPN port rule with rate limiting"
fi

# Allow management API from private networks only
if ! rule_exists INPUT -p tcp --dport $MGMT_PORT -s 10.0.0.0/8 -j ACCEPT; then
    iptables -A INPUT -p tcp --dport $MGMT_PORT -s 10.0.0.0/8 -j ACCEPT
fi
if ! rule_exists INPUT -p tcp --dport $MGMT_PORT -s 172.16.0.0/12 -j ACCEPT; then
    iptables -A INPUT -p tcp --dport $MGMT_PORT -s 172.16.0.0/12 -j ACCEPT
fi
if ! rule_exists INPUT -p tcp --dport $MGMT_PORT -s 192.168.0.0/16 -j ACCEPT; then
    iptables -A INPUT -p tcp --dport $MGMT_PORT -s 192.168.0.0/16 -j ACCEPT
fi
log_action "Added management API access rules"

# Allow VPN interface traffic
if ! rule_exists INPUT -i $VPN_INTERFACE -j ACCEPT; then
    iptables -A INPUT -i $VPN_INTERFACE -j ACCEPT
    log_action "Added VPN interface input rule"
fi

# Drop invalid packets
if ! rule_exists INPUT -m conntrack --ctstate INVALID -j DROP; then
    iptables -A INPUT -m conntrack --ctstate INVALID -j DROP
    log_action "Added invalid packet drop rule"
fi

# FORWARD chain rules
log_action "Configuring FORWARD chain rules"

# Allow VPN client to VPN client communication
if ! rule_exists FORWARD -i $VPN_INTERFACE -o $VPN_INTERFACE -j ACCEPT; then
    iptables -A FORWARD -i $VPN_INTERFACE -o $VPN_INTERFACE -j ACCEPT
    log_action "Added VPN client-to-client communication rule"
fi

# Allow VPN clients to internet (with restrictions)
if ! rule_exists FORWARD -i $VPN_INTERFACE -o $EXTERNAL_INTERFACE -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT; then
    iptables -A FORWARD -i $VPN_INTERFACE -o $EXTERNAL_INTERFACE -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
    log_action "Added VPN to internet forwarding rule"
fi

# Allow return traffic from internet to VPN clients
if ! rule_exists FORWARD -i $EXTERNAL_INTERFACE -o $VPN_INTERFACE -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT; then
    iptables -A FORWARD -i $EXTERNAL_INTERFACE -o $VPN_INTERFACE -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    log_action "Added internet to VPN return traffic rule"
fi

# Block access to local network from VPN clients (security measure)
if ! rule_exists FORWARD -i $VPN_INTERFACE -d 192.168.0.0/16 -j DROP; then
    iptables -A FORWARD -i $VPN_INTERFACE -d 192.168.0.0/16 -j DROP
    log_action "Added local network protection rule"
fi

# NAT/MASQUERADE rules
log_action "Configuring NAT rules"

# Masquerade VPN traffic going to internet
if ! iptables -t nat -C POSTROUTING -s $VPN_SUBNET -o $EXTERNAL_INTERFACE -j MASQUERADE 2>/dev/null; then
    iptables -t nat -A POSTROUTING -s $VPN_SUBNET -o $EXTERNAL_INTERFACE -j MASQUERADE
    log_action "Added NAT masquerade rule"
fi

# Security rules
log_action "Applying additional security rules"

# Rate limit new connections
if ! rule_exists INPUT -p tcp --syn -m limit --limit 1/s --limit-burst 3 -j ACCEPT; then
    iptables -A INPUT -p tcp --syn -m limit --limit 1/s --limit-burst 3 -j ACCEPT
    log_action "Added connection rate limiting"
fi

# Protect against port scanning
if ! rule_exists INPUT -m recent --name portscan --rcheck --seconds 86400 -j DROP; then
    iptables -A INPUT -m recent --name portscan --rcheck --seconds 86400 -j DROP
    iptables -A INPUT -m recent --name portscan --set -j LOG --log-prefix "Portscan blocked: "
    log_action "Added port scan protection"
fi

# Log dropped packets (sample only to avoid log flooding)
if ! rule_exists INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: "; then
    iptables -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: "
    log_action "Added packet logging rule"
fi

echo -e "${GREEN}[SUCCESS]${NC} Firewall rules applied successfully"
log_action "Firewall configuration completed successfully"
