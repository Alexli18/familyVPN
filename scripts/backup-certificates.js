#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const crypto = require('crypto');

class CertificateBackupManager {
  constructor() {
    this.backupDir = path.join(process.cwd(), 'certificate-backups');
    this.pkiDir = path.join(process.cwd(), 'easy-rsa', 'pki');
    this.certDir = path.join(process.cwd(), 'test-certificates');
    this.configDir = path.join(process.cwd(), 'src');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
   */
  async createBackup() {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...');
      
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupPath = path.join(this.backupDir, `backup-${timestamp}`);
      
      await fs.ensureDir(backupPath);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      const manifest = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        description: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π VPN —Å–µ—Ä–≤–µ—Ä–∞',
        files: []
      };

      // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ PKI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (await fs.pathExists(this.pkiDir)) {
        const pkiBackupPath = path.join(backupPath, 'pki');
        await fs.copy(this.pkiDir, pkiBackupPath);
        manifest.files.push({
          source: this.pkiDir,
          destination: 'pki',
          type: 'directory',
          description: 'PKI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (CA, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∫–ª—é—á–∏)'
        });
        console.log('‚úÖ PKI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
      }

      // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      if (await fs.pathExists(this.certDir)) {
        const certBackupPath = path.join(backupPath, 'certificates');
        await fs.copy(this.certDir, certBackupPath);
        manifest.files.push({
          source: this.certDir,
          destination: 'certificates',
          type: 'directory',
          description: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
        });
        console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
      }

      // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const configFiles = ['.env', '.env.example', 'package.json'];
      for (const configFile of configFiles) {
        const sourcePath = path.join(process.cwd(), configFile);
        if (await fs.pathExists(sourcePath)) {
          const destPath = path.join(backupPath, 'config', configFile);
          await fs.ensureDir(path.dirname(destPath));
          await fs.copy(sourcePath, destPath);
          manifest.files.push({
            source: sourcePath,
            destination: path.join('config', configFile),
            type: 'file',
            description: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${configFile}`
          });
        }
      }
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
      await this.generateChecksums(backupPath, manifest);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
      await fs.writeJson(path.join(backupPath, 'manifest.json'), manifest, { spaces: 2 });

      // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (process.argv.includes('--archive')) {
        await this.createArchive(backupPath);
      }

      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
      console.log(`üìã –§–∞–π–ª–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${manifest.files.length}`);
      
      return backupPath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
   */
  async restoreBackup(backupPath) {
    try {
      console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupPath}`);
      
      if (!await fs.pathExists(backupPath)) {
        throw new Error(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${backupPath}`);
      }

      const manifestPath = path.join(backupPath, 'manifest.json');
      if (!await fs.pathExists(manifestPath)) {
        throw new Error('–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const manifest = await fs.readJson(manifestPath);
      console.log(`üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç: ${manifest.timestamp}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      const isValid = await this.verifyBackupIntegrity(backupPath);
      if (!isValid) {
        throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
      const currentBackupPath = await this.createBackup();
      console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${currentBackupPath}`);

      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      for (const file of manifest.files) {
        const sourcePath = path.join(backupPath, file.destination);
        const destPath = file.source;

        if (file.type === 'directory') {
          if (await fs.pathExists(destPath)) {
            await fs.remove(destPath);
          }
          await fs.copy(sourcePath, destPath);
          console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${file.destination}`);
        } else {
          await fs.ensureDir(path.dirname(destPath));
          await fs.copy(sourcePath, destPath);
          console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file.destination}`);
        }
      }

      console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
   */
  async verifyBackupIntegrity(backupPath) {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      
      const manifestPath = path.join(backupPath, 'manifest.json');
      const checksumPath = path.join(backupPath, 'checksums.json');
      
      if (!await fs.pathExists(manifestPath) || !await fs.pathExists(checksumPath)) {
        console.log('‚ö†Ô∏è  –§–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return false;
      }

      const manifest = await fs.readJson(manifestPath);
      const storedChecksums = await fs.readJson(checksumPath);

      let isValid = true;
      for (const file of manifest.files) {
        const filePath = path.join(backupPath, file.destination);
        if (await fs.pathExists(filePath)) {
          const currentChecksum = await this.calculateChecksum(filePath);
          const storedChecksum = storedChecksums[file.destination];
          
          if (currentChecksum !== storedChecksum) {
            console.log(`‚ùå –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${file.destination}`);
            isValid = false;
          } else {
            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: ${file.destination}`);
          }
        } else {
          console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.destination}`);
          isValid = false;
        }
      }

      if (isValid) {
        console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏');
      } else {
        console.log('‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
      }

      return isValid;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error.message);
      return false;
    }
  }

  /**
   * –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
   */
  async listBackups() {
    try {
      if (!await fs.pathExists(this.backupDir)) {
        console.log('üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return [];
      }

      const backups = await fs.readdir(this.backupDir);
      const backupList = [];

      for (const backup of backups) {
        const backupPath = path.join(this.backupDir, backup);
        const manifestPath = path.join(backupPath, 'manifest.json');
        
        if (await fs.pathExists(manifestPath)) {
          const manifest = await fs.readJson(manifestPath);
          const stats = await fs.stat(backupPath);
          
          backupList.push({
            name: backup,
            path: backupPath,
            timestamp: manifest.timestamp,
            description: manifest.description,
            fileCount: manifest.files.length,
            size: await this.getDirectorySize(backupPath)
          });
        }
      }

      backupList.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:');
      backupList.forEach((backup, index) => {
        console.log(`${index + 1}. ${backup.name}`);
        console.log(`   –î–∞—Ç–∞: ${backup.timestamp}`);
        console.log(`   –§–∞–π–ª–æ–≤: ${backup.fileCount}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${this.formatBytes(backup.size)}`);
        console.log('');
      });

      return backupList;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error.message);
      return [];
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –¥–ª—è —Ñ–∞–π–ª–æ–≤
   */
  async generateChecksums(backupPath, manifest) {
    const checksums = {};
    
    for (const file of manifest.files) {
      const filePath = path.join(backupPath, file.destination);
      if (await fs.pathExists(filePath)) {
        checksums[file.destination] = await this.calculateChecksum(filePath);
      }
    }
    
    await fs.writeJson(path.join(backupPath, 'checksums.json'), checksums, { spaces: 2 });
    console.log('‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async calculateChecksum(filePath) {
    const stats = await fs.stat(filePath);
    
    if (stats.isDirectory()) {
      // –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –æ—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const files = await this.getAllFiles(filePath);
      const hash = crypto.createHash('sha256');
      
      for (const file of files.sort()) {
        const relativePath = path.relative(filePath, file);
        const content = await fs.readFile(file);
        hash.update(relativePath);
        hash.update(content);
      }
      
      return hash.digest('hex');
    } else {
      // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const content = await fs.readFile(filePath);
      return crypto.createHash('sha256').update(content).digest('hex');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
   */
  async getAllFiles(dirPath) {
    const files = [];
    const items = await fs.readdir(dirPath);
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item);
      const stats = await fs.stat(itemPath);
      
      if (stats.isDirectory()) {
        const subFiles = await this.getAllFiles(itemPath);
        files.push(...subFiles);
      } else {
        files.push(itemPath);
      }
    }
    
    return files;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async getDirectorySize(dirPath) {
    let size = 0;
    const files = await this.getAllFiles(dirPath);
    
    for (const file of files) {
      const stats = await fs.stat(file);
      size += stats.size;
    }
    
    return size;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
   */
  async createArchive(backupPath) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: tar -czf backup.tar.gz ' + path.basename(backupPath));
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const backup = new CertificateBackupManager();
  const command = process.argv[2];

  try {
    switch (command) {
      case 'create':
        await backup.createBackup();
        break;
      
      case 'restore':
        const backupPath = process.argv[3];
        if (!backupPath) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
          console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run backup:restore <–ø—É—Ç—å_–∫_—Ä–µ–∑–µ—Ä–≤–Ω–æ–π_–∫–æ–ø–∏–∏>');
          process.exit(1);
        }
        await backup.restoreBackup(backupPath);
        break;
      
      case 'verify':
        const verifyPath = process.argv[3];
        if (!verifyPath) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
          console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run backup:verify <–ø—É—Ç—å_–∫_—Ä–µ–∑–µ—Ä–≤–Ω–æ–π_–∫–æ–ø–∏–∏>');
          process.exit(1);
        }
        await backup.verifyBackupIntegrity(verifyPath);
        break;
      
      case 'list':
        await backup.listBackups();
        break;
      
      default:
        console.log('üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤');
        console.log('');
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  create  - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
        console.log('  restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        console.log('  verify  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        console.log('  list    - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π');
        console.log('');
        console.log('–ü—Ä–∏–º–µ—Ä—ã:');
        console.log('  npm run backup:create');
        console.log('  npm run backup:list');
        console.log('  npm run backup:verify certificate-backups/backup-2025-07-25T10-30-00-000Z');
        console.log('  npm run backup:restore certificate-backups/backup-2025-07-25T10-30-00-000Z');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = CertificateBackupManager;